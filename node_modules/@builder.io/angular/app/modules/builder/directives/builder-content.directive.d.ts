import { OnDestroy, OnInit, Renderer2, StateKey, TemplateRef, TransferState, ViewContainerRef } from '@angular/core';
import { Router } from '@angular/router';
import { Subscription as BuilderSubscription } from '@builder.io/sdk';
import { BuilderComponentService } from '../components/builder-component/builder-component.service';
import { BuilderService } from '../services/builder.service';
import * as i0 from "@angular/core";
export declare class BuilderContentDirective implements OnInit, OnDestroy {
    private _viewContainer;
    private renderer;
    private builder;
    private builderComponentService;
    private transferState;
    private router?;
    private get component();
    lastContentId: string | null;
    lastUrl: string | null;
    private subscriptions;
    private _context;
    private _templateRef;
    private _viewRef;
    private match;
    private matchId;
    private clickTracked;
    hydrated: boolean;
    constructor(_viewContainer: ViewContainerRef, renderer: Renderer2, builder: BuilderService, builderComponentService: BuilderComponentService, transferState: TransferState, templateRef: TemplateRef<BuilderContentContext>, router?: Router);
    reloadOnRoute: boolean;
    contentSubscription: BuilderSubscription | null;
    stateKey: StateKey<any> | undefined;
    requesting: boolean;
    reset(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onClick(event: MouseEvent): void;
    get stateKeyString(): string;
    set builderModel(model: string);
    private get url();
    request(): void;
    private _updateView;
    static ɵfac: i0.ɵɵFactoryDeclaration<BuilderContentDirective, [null, null, null, null, { optional: true; }, null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BuilderContentDirective, "[builderModel]", never, { "reloadOnRoute": { "alias": "reloadOnRoute"; "required": false; }; "builderModel": { "alias": "builderModel"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class BuilderContentContext {
    $implicit?: any;
    match?: any;
    model?: string;
    loading: boolean;
    results: any[];
    meta?: any;
}
