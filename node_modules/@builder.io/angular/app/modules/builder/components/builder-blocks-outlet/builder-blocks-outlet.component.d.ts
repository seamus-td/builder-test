import { AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import * as i0 from "@angular/core";
interface BuilderBlocksProps {
    blocks?: any[];
    child?: boolean;
    parentElementId?: string;
    dataPath?: string;
}
export declare class BuilderBlocksOutletComponent implements AfterViewInit, OnChanges {
    private domSanitizer;
    builderBlock: any;
    builderState: any;
    blocks: any;
    renderOnChange: boolean;
    dataPath: string | undefined;
    lastInnerHtml: string;
    lastInnerHtmlSanitized?: SafeHtml;
    get options(): BuilderBlocksProps;
    get key(): string;
    get innerHtml(): SafeHtml;
    get _innerHtml(): string;
    constructor(domSanitizer: DomSanitizer);
    ngAfterViewInit(): void;
    triggerstateChange(): Promise<void>;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BuilderBlocksOutletComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BuilderBlocksOutletComponent, "builder-blocks-outlet", never, { "builderBlock": { "alias": "builderBlock"; "required": false; }; "builderState": { "alias": "builderState"; "required": false; }; "blocks": { "alias": "blocks"; "required": false; }; "renderOnChange": { "alias": "renderOnChange"; "required": false; }; "dataPath": { "alias": "dataPath"; "required": false; }; }, {}, never, never, false, never>;
}
export {};
