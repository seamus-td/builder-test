import { Component, EventEmitter, Output, Input, ChangeDetectionStrategy, } from '@angular/core';
import { Builder } from '@builder.io/sdk';
import { BuilderService } from '../../services/builder.service';
import * as i0 from "@angular/core";
import * as i1 from "../builder-component/builder-component.service";
export class BuilderContentComponent {
    element;
    builderComponentService;
    constructor(element, builderComponentService) {
        this.element = element;
        this.builderComponentService = builderComponentService;
        builderComponentService.contentComponentInstance = this;
    }
    modelName;
    useHtml = false;
    data = {};
    hydrate = true;
    prerender = true;
    set content(content) {
        const currentContent = this._content;
        this._content = content;
        const { contentDirectiveInstance } = this.builderComponentService;
        if (!currentContent && content && contentDirectiveInstance) {
            if (!contentDirectiveInstance.requesting) {
                contentDirectiveInstance.reset();
            }
        }
    }
    get content() {
        return this._content;
    }
    _content;
    findAndRunScripts() {
        if (!Builder.isBrowser) {
            return;
        }
        const el = this.element.nativeElement;
        if (el) {
            const scripts = el.getElementsByTagName('script');
            for (let i = 0; i < scripts.length; i++) {
                const script = scripts[i];
                if (script.src) {
                    const newScript = document.createElement('script');
                    newScript.async = true;
                    newScript.src = script.src;
                    document.head.appendChild(newScript);
                }
                else {
                    try {
                        new Function(script.innerText)();
                    }
                    catch (error) {
                        console.warn('Builder custom code component error:', error);
                    }
                }
            }
        }
    }
    options = null;
    contentLoad = new EventEmitter();
    contentError = new EventEmitter();
    get editingMode() {
        return Builder.editingPage;
    }
    ngOnInit() {
        const modelName = this.element.nativeElement &&
            this.element.nativeElement.getAttribute &&
            this.element.nativeElement.getAttribute('builder-model');
        if (modelName) {
            // FIXME: doesn't work on server!
            this.modelName = modelName;
            BuilderService.componentInstances[modelName] = this;
        }
    }
    ngOnDestroy() {
        if (this.modelName) {
            if (BuilderService.componentInstances[this.modelName] === this) {
                delete BuilderService.componentInstances[this.modelName];
            }
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderContentComponent, deps: [{ token: i0.ElementRef }, { token: i1.BuilderComponentService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.6", type: BuilderContentComponent, selector: "builder-content", inputs: { useHtml: "useHtml", data: "data", hydrate: "hydrate", prerender: "prerender", content: "content", options: "options" }, outputs: { contentLoad: "contentLoad", contentError: "contentError" }, ngImport: i0, template: "<ng-content> </ng-content>\n", styles: [":host{display:block}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'builder-content', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content> </ng-content>\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.BuilderComponentService }], propDecorators: { useHtml: [{
                type: Input
            }], data: [{
                type: Input
            }], hydrate: [{
                type: Input
            }], prerender: [{
                type: Input
            }], content: [{
                type: Input
            }], options: [{
                type: Input
            }], contentLoad: [{
                type: Output
            }], contentError: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvbW9kdWxlcy9idWlsZGVyL2NvbXBvbmVudHMvYnVpbGRlci1jb250ZW50L2J1aWxkZXItY29udGVudC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL21vZHVsZXMvYnVpbGRlci9jb21wb25lbnRzL2J1aWxkZXItY29udGVudC9idWlsZGVyLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxZQUFZLEVBR1osTUFBTSxFQUNOLEtBQUssRUFDTCx1QkFBdUIsR0FDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBcUIsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7OztBQVNoRSxNQUFNLE9BQU8sdUJBQXVCO0lBRXhCO0lBQ0E7SUFGVixZQUNVLE9BQW1CLEVBQ25CLHVCQUFnRDtRQURoRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFFeEQsdUJBQXVCLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO0lBQzFELENBQUM7SUFFRCxTQUFTLENBQVU7SUFFVixPQUFPLEdBQUcsS0FBSyxDQUFDO0lBQ2hCLElBQUksR0FBUSxFQUFFLENBQUM7SUFDZixPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ2YsU0FBUyxHQUFHLElBQUksQ0FBQztJQUUxQixJQUFhLE9BQU8sQ0FBQyxPQUFPO1FBQzFCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsTUFBTSxFQUFFLHdCQUF3QixFQUFF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UzsrQkFDRSxpQkFBaUIsbUJBR1YsdUJBQXVCLENBQUMsTUFBTTtxSEFZdEMsT0FBTztzQkFBZixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFDRyxPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csU0FBUztzQkFBakIsS0FBSztnQkFFTyxPQUFPO3NCQUFuQixLQUFLO2dCQXlDRyxPQUFPO3NCQUFmLEtBQUs7Z0JBRUksV0FBVztzQkFBcEIsTUFBTTtnQkFDRyxZQUFZO3NCQUFyQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXQsXG4gIElucHV0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCdWlsZGVyLCBHZXRDb250ZW50T3B0aW9ucyB9IGZyb20gJ0BidWlsZGVyLmlvL3Nkayc7XG5pbXBvcnQgeyBCdWlsZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2J1aWxkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBCdWlsZGVyQ29tcG9uZW50U2VydmljZSB9IGZyb20gJy4uL2J1aWxkZXItY29tcG9uZW50L2J1aWxkZXItY29tcG9uZW50LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdidWlsZGVyLWNvbnRlbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vYnVpbGRlci1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYnVpbGRlci1jb250ZW50LmNvbXBvbmVudC5jc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEJ1aWxkZXJDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBidWlsZGVyQ29tcG9uZW50U2VydmljZTogQnVpbGRlckNvbXBvbmVudFNlcnZpY2VcbiAgKSB7XG4gICAgYnVpbGRlckNvbXBvbmVudFNlcnZpY2UuY29udGVudENvbXBvbmVudEluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gIG1vZGVsTmFtZT86IHN0cmluZztcblxuICBASW5wdXQoKSB1c2VIdG1sID0gZmFsc2U7XG4gIEBJbnB1dCgpIGRhdGE6IGFueSA9IHt9O1xuICBASW5wdXQoKSBoeWRyYXRlID0gdHJ1ZTtcbiAgQElucHV0KCkgcHJlcmVuZGVyID0gdHJ1ZTtcblxuICBASW5wdXQoKSBzZXQgY29udGVudChjb250ZW50KSB7XG4gICAgY29uc3QgY3VycmVudENvbnRlbnQgPSB0aGlzLl9jb250ZW50O1xuICAgIHRoaXMuX2NvbnRlbnQgPSBjb250ZW50O1xuICAgIGNvbnN0IHsgY29udGVudERpcmVjdGl2ZUluc3RhbmNlIH0gPSB0aGlzLmJ1aWxkZXJDb21wb25lbnRTZXJ2aWNlO1xuICAgIGlmICghY3VycmVudENvbnRlbnQgJiYgY29udGVudCAmJiBjb250ZW50RGlyZWN0aXZlSW5zdGFuY2UpIHtcbiAgICAgIGlmICghY29udGVudERpcmVjdGl2ZUluc3RhbmNlLnJlcXVlc3RpbmcpIHtcbiAgICAgICAgY29udGVudERpcmVjdGl2ZUluc3RhbmNlLnJlc2V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBjb250ZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50O1xuICB9XG4gIHByaXZhdGUgX2NvbnRlbnQ6IGFueTtcblxuICBmaW5kQW5kUnVuU2NyaXB0cygpIHtcbiAgICBpZiAoIUJ1aWxkZXIuaXNCcm93c2VyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVsID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIGNvbnN0IHNjcmlwdHMgPSBlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0ID0gc2NyaXB0c1tpXTtcbiAgICAgICAgaWYgKHNjcmlwdC5zcmMpIHtcbiAgICAgICAgICBjb25zdCBuZXdTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgICBuZXdTY3JpcHQuYXN5bmMgPSB0cnVlO1xuICAgICAgICAgIG5ld1NjcmlwdC5zcmMgPSBzY3JpcHQuc3JjO1xuICAgICAgICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobmV3U2NyaXB0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbmV3IEZ1bmN0aW9uKHNjcmlwdC5pbm5lclRleHQpKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQnVpbGRlciBjdXN0b20gY29kZSBjb21wb25lbnQgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIG9wdGlvbnM6IEdldENvbnRlbnRPcHRpb25zIHwgbnVsbCA9IG51bGw7XG5cbiAgQE91dHB1dCgpIGNvbnRlbnRMb2FkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIEBPdXRwdXQoKSBjb250ZW50RXJyb3IgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBnZXQgZWRpdGluZ01vZGUoKSB7XG4gICAgcmV0dXJuIEJ1aWxkZXIuZWRpdGluZ1BhZ2U7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBtb2RlbE5hbWUgPVxuICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgJiZcbiAgICAgICh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuZ2V0QXR0cmlidXRlICYmXG4gICAgICAodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmdldEF0dHJpYnV0ZSgnYnVpbGRlci1tb2RlbCcpO1xuICAgIGlmIChtb2RlbE5hbWUpIHtcbiAgICAgIC8vIEZJWE1FOiBkb2Vzbid0IHdvcmsgb24gc2VydmVyIVxuICAgICAgdGhpcy5tb2RlbE5hbWUgPSBtb2RlbE5hbWU7XG4gICAgICBCdWlsZGVyU2VydmljZS5jb21wb25lbnRJbnN0YW5jZXNbbW9kZWxOYW1lXSA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMubW9kZWxOYW1lKSB7XG4gICAgICBpZiAoQnVpbGRlclNlcnZpY2UuY29tcG9uZW50SW5zdGFuY2VzW3RoaXMubW9kZWxOYW1lXSA9PT0gdGhpcykge1xuICAgICAgICBkZWxldGUgQnVpbGRlclNlcnZpY2UuY29tcG9uZW50SW5zdGFuY2VzW3RoaXMubW9kZWxOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIjxuZy1jb250ZW50PiA8L25nLWNvbnRlbnQ+XG4iXX0=