import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, Optional, } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { BuilderComponentService } from './builder-component.service';
import { Builder } from '@builder.io/sdk';
import { Subscription, BehaviorSubject } from 'rxjs';
import { ANGULAR_LATEST_VERSION, SCRIPT_ID } from '../../utils/constants';
import * as i0 from "@angular/core";
import * as i1 from "../../services/builder.service";
import * as i2 from "@angular/router";
import * as i3 from "@angular/common";
import * as i4 from "../builder-content/builder-content.component";
import * as i5 from "../builder-blocks/builder-blocks.component";
import * as i6 from "../../directives/builder-content.directive";
function omit(obj, ...values) {
    const newObject = Object.assign({}, obj);
    for (const key of values) {
        delete newObject[key];
    }
    return newObject;
}
let wcScriptInserted = false;
const NAVIGATION_TIMEOUT_DEFAULT = 1000;
function delay(duration, resolveValue) {
    return new Promise((resolve) => setTimeout(() => resolve(resolveValue), duration));
}
export class BuilderComponentComponent {
    viewContainer;
    elementRef;
    builderService;
    router;
    model;
    set name(name) {
        this.model = name;
    }
    handleRouting = true;
    reloadOnRoute = true;
    load = new EventEmitter();
    route = new EventEmitter();
    error = new EventEmitter();
    content = null;
    options = null;
    data = {};
    context = {};
    hydrate = true;
    prerender = true;
    // Sometimes user will have slow connection and when we are using Resolver on target route
    // then, application will be fully reloaded. In that case set it to false to avoid full-reload navigation.
    navigationTimeout = NAVIGATION_TIMEOUT_DEFAULT;
    subscriptions = new Subscription();
    visible = new BehaviorSubject(true);
    get url() {
        const location = this.builderService.getLocation();
        return location.pathname || '';
    }
    get key() {
        const key = Builder.isEditing || !this.reloadOnRoute ? this.model : `${this.model}:${this.url}`;
        return key;
    }
    constructor(viewContainer, elementRef, builderService, router) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
        this.builderService = builderService;
        this.router = router;
    }
    async ensureWCScriptLoaded() {
        if (!Builder.isBrowser || wcScriptInserted || document.getElementById(SCRIPT_ID)) {
            return;
        }
        function getQueryParam(url, variable) {
            const query = url.split('?')[1] || '';
            const vars = query.split('&');
            for (let i = 0; i < vars.length; i++) {
                const pair = vars[i].split('=');
                if (decodeURIComponent(pair[0]) === variable) {
                    return decodeURIComponent(pair[1]);
                }
            }
            return null;
        }
        const script = document.createElement('script');
        const wcVersion = getQueryParam(location.href, 'builder.wcVersion') || ANGULAR_LATEST_VERSION;
        script.id = SCRIPT_ID;
        // TODO: detect builder.wcVersion and if customEleemnts exists and do
        // dynamic versions and lite here
        script.src = `https://cdn.builder.io/js/webcomponents@${wcVersion || 'latest'}/dist/system/angular/builder-webcomponents-async.js`;
        script.async = true;
        wcScriptInserted = true;
        return new Promise((resolve, reject) => {
            script.addEventListener('load', resolve);
            script.addEventListener('error', (e) => reject(e.error));
            document.head.appendChild(script);
        });
    }
    async ensureWcLoadedAndUpdate() {
        await this.ensureWCScriptLoaded();
        const { onBuilderWcLoad } = window;
        if (onBuilderWcLoad) {
            onBuilderWcLoad((BuilderWC) => {
                const builder = BuilderWC.builder;
                builder.apiKey = this.builderService.apiKey;
                builder.canTrack = this.builderService.canTrack;
                builder.setUserAttributes(omit(this.builderService.getUserAttributes(), 'urlPath'));
                this.builderService.userAttributesChanged.subscribe((attrs) => builder.setUserAttributes(attrs));
                this.triggerstateChange();
            });
        }
    }
    ngOnInit() {
        if (this.router && this.reloadOnRoute) {
            // TODO: should the inner function return reloadOnRoute?
            this.router.routeReuseStrategy.shouldReuseRoute = () => false;
        }
        if (Builder.isBrowser) {
            if (this.router) {
                this.subscriptions.add(this.router.events.subscribe((event) => {
                    if (event instanceof NavigationEnd) {
                        if (this.reloadOnRoute) {
                            // Force reload component
                            this.visible.next(false);
                            Builder.nextTick(() => {
                                this.visible.next(true);
                            });
                        }
                    }
                }));
            }
            this.subscriptions.add(this.load.subscribe(async (value) => {
                // TODO: this may run constantly when editing - check on this, not
                // end of world but not ideal for perf
                this.viewContainer.detach();
                if (Builder.isEditing || (value && value.data && this.hydrate !== false)) {
                    await this.ensureWcLoadedAndUpdate();
                }
            }));
        }
        if (Builder.isBrowser && (this.hydrate !== false || Builder.isEditing)) {
            this.ensureWcLoadedAndUpdate();
        }
    }
    async triggerstateChange() {
        const query = `builder-component-element[name="${this.model}"]`;
        const element = document.querySelector(query);
        if (element) {
            customElements.whenDefined('builder-component-element').then(() => {
                element.setState(this.data);
                element.setContext(this.context);
            });
        }
    }
    ngOnChanges(changes) {
        if (changes.data) {
            this.triggerstateChange();
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    // TODO: this should be in BuilderBlocks
    async onClick(event) {
        if (!this.handleRouting) {
            return;
        }
        if (event.button !== 0 || event.ctrlKey || event.defaultPrevented) {
            // If this is a non-left click, or the user is holding ctr/cmd, or the url is absolute,
            // or if the link has a target attribute, don't route on the client and let the default
            // href property handle the navigation
            return;
        }
        const hrefTarget = this.findHrefTarget(event);
        if (!hrefTarget) {
            return;
        }
        // target="_blank" or target="_self" etc
        if (hrefTarget.target) {
            return;
        }
        let href = hrefTarget.getAttribute('href');
        if (!href) {
            return;
        }
        if (href.startsWith('javascript:')) {
            return;
        }
        const routeEvent = {
            url: href,
            anchorNode: hrefTarget,
            preventDefault() {
                this.defaultPrevented = true;
            },
            defaultPrevented: false,
        };
        this.route.next(routeEvent);
        if (routeEvent.defaultPrevented) {
            event.preventDefault();
            return;
        }
        if (event.metaKey) {
            return;
        }
        if (!this.isRelative(href)) {
            const converted = this.convertToRelative(href);
            if (converted) {
                href = converted;
            }
            else {
                return;
            }
        }
        if (!this.router) {
            return;
        }
        // Otherwise if this url is relative, navigate on the client
        event.preventDefault();
        // Attempt to route on the client
        let success = null;
        const routePromise = this.router.navigateByUrl(href);
        const useNavigationTimeout = !(typeof this.navigationTimeout === 'boolean' && !this.navigationTimeout);
        const timeoutPromise = delay(typeof this.navigationTimeout === 'number'
            ? this.navigationTimeout
            : NAVIGATION_TIMEOUT_DEFAULT, false);
        try {
            const promiseRace = useNavigationTimeout ? [timeoutPromise, routePromise] : [routePromise];
            success = await Promise.race(promiseRace);
        }
        finally {
            // This is in a click handler so it will only run on the client
            if (success) {
                // If successful scroll the window to the top
                window.scrollTo(0, 0);
            }
            else {
                // Otherwise handle the routing with a page refresh on failure. Angular, by deafult
                // if it fails to load a URL (e.g. if an API request failed when loading it), instead
                // of navigating to the new page to tell the user that their click did something but
                // the resulting page has an issue, it instead just silently fails and shows the user
                // nothing. Lets make sure we route to the new page. In some cases this even brings the
                // user to a correct and valid page anyway
                location.href = `${location.protocol}//${location.host}${href}`;
            }
        }
    }
    isRelative(href) {
        return (!href.match(/^(\/\/|https?:\/\/)/i) &&
            // Handle Mailto and Tel links
            !href.startsWith('tel:') &&
            !href.startsWith('mailto:') &&
            // Handle local hash links
            !href.startsWith('#'));
    }
    // Attempt to convert an absolute url to relative if possible (aka if the hosts match)
    convertToRelative(href) {
        const currentUrl = new URL(location.href);
        const hrefUrl = new URL(href);
        if (currentUrl.host === hrefUrl.host) {
            const relativeUrl = hrefUrl.pathname + (hrefUrl.search ? hrefUrl.search : '');
            return relativeUrl;
        }
    }
    findHrefTarget(event) {
        let element = event.target;
        while (element) {
            if (element instanceof HTMLAnchorElement && element.getAttribute('href')) {
                return element;
            }
            if (element === event.currentTarget) {
                break;
            }
            element = element.parentElement;
        }
        return null;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderComponentComponent, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }, { token: i1.BuilderService }, { token: i2.Router, optional: true }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.6", type: BuilderComponentComponent, selector: "builder-component", inputs: { model: "model", name: "name", handleRouting: "handleRouting", reloadOnRoute: "reloadOnRoute", content: "content", options: "options", data: "data", context: "context", hydrate: "hydrate", prerender: "prerender", navigationTimeout: "navigationTimeout" }, outputs: { load: "load", route: "route", error: "error" }, providers: [BuilderComponentService], usesOnChanges: true, ngImport: i0, template: "<span *ngIf=\"visible | async\" class=\"builder-component-wrap\">\n  <span *ngIf=\"!prerender\">\n    <builder-blocks\n      field=\"blocks\"\n      [key]=\"key\"\n      [model]=\"model\"\n      (click)=\"onClick($event)\"\n      [prerender]=\"false\"\n      [options]=\"options\"\n    ></builder-blocks>\n  </span>\n  <span *ngIf=\"prerender\">\n    <builder-content\n      [data]=\"data\"\n      [hydrate]=\"hydrate\"\n      [prerender]=\"prerender\"\n      [content]=\"content\"\n      [options]=\"options\"\n      (click)=\"onClick($event)\"\n      (contentLoad)=\"load.next($event)\"\n      (contentError)=\"error.next($event)\"\n      *builderModel=\"model; let content; let loading = loading; let meta = meta;\"\n    >\n      <builder-blocks\n        *ngIf=\"content\"\n        field=\"blocks\"\n        [key]=\"key\"\n        [model]=\"model\"\n        [prerender]=\"prerender\"\n        [options]=\"options\"\n        [blocks]=\"content.blocks || content\"\n        [breakpoints]=\"(content.meta && content.meta.breakpoints) || (meta && meta.breakpoints) || undefined\"\n      ></builder-blocks>\n      <ng-content *ngIf=\"loading\"></ng-content>\n    </builder-content>\n  </span>\n</span>\n", styles: [":host{display:block}\n"], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i4.BuilderContentComponent, selector: "builder-content", inputs: ["useHtml", "data", "hydrate", "prerender", "content", "options"], outputs: ["contentLoad", "contentError"] }, { kind: "component", type: i5.BuilderBlocksComponent, selector: "builder-blocks", inputs: ["blocks", "child", "prerender", "model", "key", "options", "field", "breakpoints"] }, { kind: "directive", type: i6.BuilderContentDirective, selector: "[builderModel]", inputs: ["reloadOnRoute", "builderModel"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderComponentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'builder-component', providers: [BuilderComponentService], changeDetection: ChangeDetectionStrategy.OnPush, template: "<span *ngIf=\"visible | async\" class=\"builder-component-wrap\">\n  <span *ngIf=\"!prerender\">\n    <builder-blocks\n      field=\"blocks\"\n      [key]=\"key\"\n      [model]=\"model\"\n      (click)=\"onClick($event)\"\n      [prerender]=\"false\"\n      [options]=\"options\"\n    ></builder-blocks>\n  </span>\n  <span *ngIf=\"prerender\">\n    <builder-content\n      [data]=\"data\"\n      [hydrate]=\"hydrate\"\n      [prerender]=\"prerender\"\n      [content]=\"content\"\n      [options]=\"options\"\n      (click)=\"onClick($event)\"\n      (contentLoad)=\"load.next($event)\"\n      (contentError)=\"error.next($event)\"\n      *builderModel=\"model; let content; let loading = loading; let meta = meta;\"\n    >\n      <builder-blocks\n        *ngIf=\"content\"\n        field=\"blocks\"\n        [key]=\"key\"\n        [model]=\"model\"\n        [prerender]=\"prerender\"\n        [options]=\"options\"\n        [blocks]=\"content.blocks || content\"\n        [breakpoints]=\"(content.meta && content.meta.breakpoints) || (meta && meta.breakpoints) || undefined\"\n      ></builder-blocks>\n      <ng-content *ngIf=\"loading\"></ng-content>\n    </builder-content>\n  </span>\n</span>\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }, { type: i1.BuilderService }, { type: i2.Router, decorators: [{
                    type: Optional
                }] }], propDecorators: { model: [{
                type: Input
            }], name: [{
                type: Input
            }], handleRouting: [{
                type: Input
            }], reloadOnRoute: [{
                type: Input
            }], load: [{
                type: Output
            }], route: [{
                type: Output
            }], error: [{
                type: Output
            }], content: [{
                type: Input
            }], options: [{
                type: Input
            }], data: [{
                type: Input
            }], context: [{
                type: Input
            }], hydrate: [{
                type: Input
            }], prerender: [{
                type: Input
            }], navigationTimeout: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,