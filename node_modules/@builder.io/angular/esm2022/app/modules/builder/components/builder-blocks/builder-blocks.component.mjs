import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { Builder } from '@builder.io/sdk';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../../services/builder.service";
export class BuilderBlocksComponent {
    domSanitizer;
    builder;
    blocks;
    child = false;
    prerender = true;
    model = '';
    key = '';
    options = null;
    // @deprecated
    field = '';
    breakpoints;
    constructor(domSanitizer, builder) {
        this.domSanitizer = domSanitizer;
        this.builder = builder;
    }
    lastInnerHtml = '';
    lastInnerHtmlSanitized = null;
    get hasNoChildren() {
        return !(this.blocks && (this.blocks.length || this.blocks.html));
    }
    get arrayBlocks() {
        return Array.isArray(this.blocks);
    }
    get innerHtml() {
        const html = this._innerHtml;
        if (html === this.lastInnerHtml) {
            return this.lastInnerHtmlSanitized || '';
        }
        this.lastInnerHtml = html;
        this.lastInnerHtmlSanitized = this.domSanitizer.bypassSecurityTrustHtml(html);
        return this.lastInnerHtmlSanitized;
    }
    get _innerHtml() {
        // TODO: pass options too
        if (!this.prerender || Builder.isEditing) {
            return `<builder-component-element prerender="false" ${!this.model ? '' : `name="${this.model}"`}></builder-component-element>`;
        }
        const elStr = `<builder-component-element prerender="false" ${!this.model ? '' : `name="${this.model}"`}></builder-component-element>`;
        if (this.arrayBlocks || !this.blocks) {
            return elStr;
        }
        if (!this.blocks.html) {
            return elStr;
        }
        const css = this.blocks.css;
        let html = this.blocks.html;
        if (this.breakpoints) {
            if (this.breakpoints.small) {
                html = html.replace(/max-width:640/g, `max-width:${this.breakpoints.small}`);
            }
            if (this.breakpoints.medium) {
                html = html.replace(/max-width:991/g, `max-width:${this.breakpoints.medium}`);
            }
        }
        if (css) {
            html = `<style class="builder-styles">${css}</style>` + html;
        }
        return `<builder-component-element key="${this.key || this.model}" options='${JSON.stringify(this.options || null // TODO: HTML encode
        )}' prerender="false" rev="${this.blocks.rev || ''}" ${!this.model ? '' : `name="${this.model}"`}>${html}</builder-component-element>`;
    }
    trackByFn(index, value) {
        // TODO: possibly json-stable-stringify
        return value.id || (value.component && value.component.id) || JSON.stringify(value);
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderBlocksComponent, deps: [{ token: i1.DomSanitizer }, { token: i2.BuilderService }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.6", type: BuilderBlocksComponent, selector: "builder-blocks", inputs: { blocks: "blocks", child: "child", prerender: "prerender", model: "model", key: "key", options: "options", field: "field", breakpoints: "breakpoints" }, ngImport: i0, template: "<div class=\"builder-blocks builder-blocks-html\">\n  <div [innerHTML]=\"innerHtml\"></div>\n</div>\n", styles: [""], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderBlocksComponent, decorators: [{
            type: Component,
            args: [{ selector: 'builder-blocks', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"builder-blocks builder-blocks-html\">\n  <div [innerHTML]=\"innerHtml\"></div>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.DomSanitizer }, { type: i2.BuilderService }], propDecorators: { blocks: [{
                type: Input
            }], child: [{
                type: Input
            }], prerender: [{
                type: Input
            }], model: [{
                type: Input
            }], key: [{
                type: Input
            }], options: [{
                type: Input
            }], field: [{
                type: Input
            }], breakpoints: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,