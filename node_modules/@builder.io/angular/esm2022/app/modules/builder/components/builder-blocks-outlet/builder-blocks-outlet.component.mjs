import { Component, Input, ChangeDetectionStrategy, } from '@angular/core';
import { Builder } from '@builder.io/sdk';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class BuilderBlocksOutletComponent {
    domSanitizer;
    builderBlock;
    builderState;
    blocks;
    renderOnChange = true;
    dataPath;
    lastInnerHtml = '';
    lastInnerHtmlSanitized;
    get options() {
        return {
            child: true,
            parentElementId: this.builderBlock.id,
            blocks: this.blocks,
            dataPath: this.dataPath,
        };
    }
    get key() {
        return this.builderBlock.id + this.dataPath;
    }
    get innerHtml() {
        const html = this._innerHtml;
        if (html === this.lastInnerHtml) {
            return this.lastInnerHtmlSanitized || '';
        }
        this.lastInnerHtml = html;
        this.lastInnerHtmlSanitized = this.domSanitizer.bypassSecurityTrustHtml(html);
        return this.lastInnerHtmlSanitized;
    }
    get _innerHtml() {
        return `<builder-blocks-slot key="${this.key}"></builder-blocks-slot>`;
    }
    constructor(domSanitizer) {
        this.domSanitizer = domSanitizer;
    }
    ngAfterViewInit() {
        if (Builder.isBrowser) {
            this.triggerstateChange();
        }
    }
    async triggerstateChange() {
        const query = `builder-blocks-slot[key="${this.key}"]`;
        const element = document.querySelector(query);
        if (element) {
            await customElements.whenDefined('builder-blocks-slot');
            element.setProps(this.options, this.builderState);
        }
    }
    ngOnChanges(changes) {
        if (changes.blocks && this.renderOnChange) {
            this.triggerstateChange();
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderBlocksOutletComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.6", type: BuilderBlocksOutletComponent, selector: "builder-blocks-outlet", inputs: { builderBlock: "builderBlock", builderState: "builderState", blocks: "blocks", renderOnChange: "renderOnChange", dataPath: "dataPath" }, usesOnChanges: true, ngImport: i0, template: "<div [innerHTML]=\"innerHtml\"></div>\n", styles: [":host{display:block}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderBlocksOutletComponent, decorators: [{
            type: Component,
            args: [{ selector: 'builder-blocks-outlet', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [innerHTML]=\"innerHtml\"></div>\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: () => [{ type: i1.DomSanitizer }], propDecorators: { builderBlock: [{
                type: Input
            }], builderState: [{
                type: Input
            }], blocks: [{
                type: Input
            }], renderOnChange: [{
                type: Input
            }], dataPath: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci1ibG9ja3Mtb3V0bGV0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvbW9kdWxlcy9idWlsZGVyL2NvbXBvbmVudHMvYnVpbGRlci1ibG9ja3Mtb3V0bGV0L2J1aWxkZXItYmxvY2tzLW91dGxldC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvYXBwL21vZHVsZXMvYnVpbGRlci9jb21wb25lbnRzL2J1aWxkZXItYmxvY2tzLW91dGxldC9idWlsZGVyLWJsb2Nrcy1vdXRsZXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsdUJBQXVCLEdBT3hCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBZTFDLE1BQU0sT0FBTyw0QkFBNEI7SUFnRG5CO0lBOUNwQixZQUFZLENBQU07SUFHbEIsWUFBWSxDQUFNO0lBR2xCLE1BQU0sQ0FBTTtJQUdaLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFHdEIsUUFBUSxDQUFxQjtJQUU3QixhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQ25CLHNCQUFzQixDQUFZO0lBRWxDLElBQUksT0FBTztRQUNULE9BQU87WUFDTCxLQUFLLEVBQUUsSUFBSTtZQUNYLGVBQWUsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDckMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksR0FBRztRQUNMLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM3QixJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDaEMsT0FBTyxJQUFJLENBQUMsc0JBQXNCLElBQUksRUFBRSxDQUFDO1FBQzNDLENBQUM7UUFFRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU5RSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxVQUFVO1FBQ1osT0FBTyw2QkFBNkIsSUFBSSxDQUFDLEdBQUcsMEJBQTBCLENBQUM7SUFDekUsQ0FBQztJQUVELFlBQW9CLFlBQTBCO1FBQTFCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBQUcsQ0FBQztJQUVsRCxlQUFlO1FBQ2IsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDNUIsQ0FBQztJQUNILENBQUM7SUFFRCxLQUFLLENBQUMsa0JBQWtCO1FBQ3RCLE1BQU0sS0FBSyxHQUFHLDRCQUE0QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDdkQsTUFBTSxPQUFPLEdBQVEsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxJQUFJLE9BQU8sRUFBRSxDQUFDO1lBQ1osTUFBTSxjQUFjLENBQUMsV0FBVyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDeEQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxDQUFDO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQzFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO3VHQXJFVSw0QkFBNEI7MkZBQTVCLDRCQUE0QixvT0MzQnpDLHlDQUNBOzsyRkQwQmEsNEJBQTRCO2tCQU54QyxTQUFTOytCQUNFLHVCQUF1QixtQkFHaEIsdUJBQXVCLENBQUMsTUFBTTtpRkFJL0MsWUFBWTtzQkFEWCxLQUFLO2dCQUlOLFlBQVk7c0JBRFgsS0FBSztnQkFJTixNQUFNO3NCQURMLEtBQUs7Z0JBSU4sY0FBYztzQkFEYixLQUFLO2dCQUlOLFFBQVE7c0JBRFAsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBBZnRlclZpZXdJbml0LFxuICBPbkluaXQsXG4gIE9uQ2hhbmdlcyxcbiAgLy8gVmlld0NvbnRhaW5lclJlZixcbiAgLy8gRWxlbWVudFJlZixcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIsIFNhZmVIdG1sIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnQGJ1aWxkZXIuaW8vc2RrJztcblxuaW50ZXJmYWNlIEJ1aWxkZXJCbG9ja3NQcm9wcyB7XG4gIGJsb2Nrcz86IGFueVtdO1xuICBjaGlsZD86IGJvb2xlYW47XG4gIHBhcmVudEVsZW1lbnRJZD86IHN0cmluZztcbiAgZGF0YVBhdGg/OiBzdHJpbmc7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2J1aWxkZXItYmxvY2tzLW91dGxldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9idWlsZGVyLWJsb2Nrcy1vdXRsZXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9idWlsZGVyLWJsb2Nrcy1vdXRsZXQuY29tcG9uZW50LmNzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgQnVpbGRlckJsb2Nrc091dGxldENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpXG4gIGJ1aWxkZXJCbG9jazogYW55O1xuXG4gIEBJbnB1dCgpXG4gIGJ1aWxkZXJTdGF0ZTogYW55O1xuXG4gIEBJbnB1dCgpXG4gIGJsb2NrczogYW55O1xuXG4gIEBJbnB1dCgpXG4gIHJlbmRlck9uQ2hhbmdlID0gdHJ1ZTtcblxuICBASW5wdXQoKVxuICBkYXRhUGF0aDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGxhc3RJbm5lckh0bWwgPSAnJztcbiAgbGFzdElubmVySHRtbFNhbml0aXplZD86IFNhZmVIdG1sO1xuXG4gIGdldCBvcHRpb25zKCk6IEJ1aWxkZXJCbG9ja3NQcm9wcyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkOiB0cnVlLFxuICAgICAgcGFyZW50RWxlbWVudElkOiB0aGlzLmJ1aWxkZXJCbG9jay5pZCxcbiAgICAgIGJsb2NrczogdGhpcy5ibG9ja3MsXG4gICAgICBkYXRhUGF0aDogdGhpcy5kYXRhUGF0aCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGtleSgpIHtcbiAgICByZXR1cm4gdGhpcy5idWlsZGVyQmxvY2suaWQgKyB0aGlzLmRhdGFQYXRoO1xuICB9XG5cbiAgZ2V0IGlubmVySHRtbCgpIHtcbiAgICBjb25zdCBodG1sID0gdGhpcy5faW5uZXJIdG1sO1xuICAgIGlmIChodG1sID09PSB0aGlzLmxhc3RJbm5lckh0bWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RJbm5lckh0bWxTYW5pdGl6ZWQgfHwgJyc7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0SW5uZXJIdG1sID0gaHRtbDtcbiAgICB0aGlzLmxhc3RJbm5lckh0bWxTYW5pdGl6ZWQgPSB0aGlzLmRvbVNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChodG1sKTtcblxuICAgIHJldHVybiB0aGlzLmxhc3RJbm5lckh0bWxTYW5pdGl6ZWQ7XG4gIH1cblxuICBnZXQgX2lubmVySHRtbCgpIHtcbiAgICByZXR1cm4gYDxidWlsZGVyLWJsb2Nrcy1zbG90IGtleT1cIiR7dGhpcy5rZXl9XCI+PC9idWlsZGVyLWJsb2Nrcy1zbG90PmA7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAoQnVpbGRlci5pc0Jyb3dzZXIpIHtcbiAgICAgIHRoaXMudHJpZ2dlcnN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdHJpZ2dlcnN0YXRlQ2hhbmdlKCkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gYGJ1aWxkZXItYmxvY2tzLXNsb3Rba2V5PVwiJHt0aGlzLmtleX1cIl1gO1xuICAgIGNvbnN0IGVsZW1lbnQ6IGFueSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocXVlcnkpO1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICBhd2FpdCBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZCgnYnVpbGRlci1ibG9ja3Mtc2xvdCcpO1xuICAgICAgZWxlbWVudC5zZXRQcm9wcyh0aGlzLm9wdGlvbnMsIHRoaXMuYnVpbGRlclN0YXRlKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKGNoYW5nZXMuYmxvY2tzICYmIHRoaXMucmVuZGVyT25DaGFuZ2UpIHtcbiAgICAgIHRoaXMudHJpZ2dlcnN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2IFtpbm5lckhUTUxdPVwiaW5uZXJIdG1sXCI+PC9kaXY+XG4iXX0=