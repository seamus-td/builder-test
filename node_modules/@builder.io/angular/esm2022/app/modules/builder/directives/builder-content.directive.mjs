import { Directive, Input, makeStateKey, Optional } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { Builder } from '@builder.io/sdk';
import { Subscription } from 'rxjs';
import { BuilderContentService } from '../services/builder-content.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/builder.service";
import * as i2 from "../components/builder-component/builder-component.service";
import * as i3 from "@angular/router";
export class BuilderContentDirective {
    _viewContainer;
    renderer;
    builder;
    builderComponentService;
    transferState;
    router;
    get component() {
        // return BuilderService.componentInstances[this._context.model as string];
        return this.builderComponentService.contentComponentInstance;
    }
    lastContentId = null;
    lastUrl = null;
    subscriptions = new Subscription();
    _context = new BuilderContentContext();
    _templateRef = null;
    _viewRef = null;
    // private _repeat = false;
    match;
    matchId = '';
    clickTracked = false;
    hydrated = false;
    constructor(_viewContainer, renderer, builder, builderComponentService, transferState, templateRef, router) {
        this._viewContainer = _viewContainer;
        this.renderer = renderer;
        this.builder = builder;
        this.builderComponentService = builderComponentService;
        this.transferState = transferState;
        this.router = router;
        builderComponentService.contentDirectiveInstance = this;
        this._templateRef = templateRef;
    }
    // TODO: pass this option down from builder-component
    reloadOnRoute = true;
    contentSubscription = null;
    stateKey;
    requesting = true;
    reset() {
        // TODO: listen to any target change? This just updates target?
        // TODO: track last fetched ID and don't replace dom if on new url the content is the same...
        this.clickTracked = false;
        this.hydrated = false;
        // Verify the route didn't result in this component being destroyed
        this.request();
    }
    ngOnInit() {
        Builder.nextTick(() => {
            this.request();
        });
        if (this.router) {
            this.subscriptions.add(this.router.events.subscribe((event) => {
                // TODO: this doesn't trigger
                if (event instanceof NavigationEnd) {
                    if (this.reloadOnRoute) {
                        const viewRef = this._viewRef;
                        if (viewRef && viewRef.destroyed) {
                            return;
                        }
                        if (this.url !== this.lastUrl) {
                            this.reset();
                        }
                    }
                }
            }));
        }
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
        if (this.contentSubscription) {
            this.contentSubscription.unsubscribe();
        }
    }
    // TODO: have another option for this or get from metadata
    // @Input()
    // set modelMultiple(repeat: boolean) {
    //   this._repeat = repeat;
    // }
    // @HostListener('click')
    onClick(event) {
        if (this.matchId && !this.hydrated) {
            const match = this.match;
            if (this.builder.autoTrack) {
                this.builder.trackInteraction(this.matchId, match && match.variationId, this.clickTracked, event, { content: match });
            }
            this.clickTracked = true;
        }
        // TODO: only in editor mode
        // TODO: put messaging on builder class
        if (document.body.classList.contains('builder-editing')) {
            if (this.matchId) {
                // TODO: get event object and pass mouse coordinages
                window.parent.postMessage({
                    type: 'builder.clickContent',
                    data: {
                        id: this.matchId,
                        model: this._context.model,
                    },
                }, '*');
            }
            else {
                window.parent.postMessage({
                    type: 'builder.clickModel',
                    data: {
                        model: this._context.model,
                    },
                }, '*');
            }
        }
    }
    get stateKeyString() {
        return 'builder:' + this._context.model + ':' + (this.reloadOnRoute ? this.url : '');
    }
    // TODO: limit?
    // TODO: context with index, etc
    set builderModel(model) {
        if (!model) {
            return;
        }
        this._context.model = model;
        this._updateView();
        this.stateKey = makeStateKey(this.stateKeyString);
        // this.request();
        const rootNode = this._viewRef.rootNodes[0];
        this.renderer.setAttribute(rootNode, 'builder-model', model);
        this.renderer.setAttribute(rootNode, 'builder-model-name', model.replace(/-/g, ' '));
        this.renderer.listen(rootNode, 'click', (event) => this.onClick(event));
    }
    get url() {
        const location = this.builder.getLocation();
        return location.pathname || ''; // + (location.search || '');
    }
    // TODO: service for this
    request() {
        this.lastUrl = this.url;
        this.requesting = true;
        if (this.component && !this.component.prerender) {
            return;
        }
        const viewRef = this._viewRef;
        if (viewRef && viewRef.destroyed) {
            return;
        }
        let receivedFirstResponse = false;
        const model = this._context.model;
        const options = this.component && this.component.options;
        const initialContent = (this.component && this.component.content) ||
            (Builder.isBrowser &&
                // firstEverLoad &&
                this.transferState &&
                this.transferState.get(this.stateKeyString, null));
        // firstEverLoad = false;
        // TODO: if not multipe
        if (this.contentSubscription) {
            // TODO: cancel a request if one is pending... or set some kind of flag
            this.contentSubscription.unsubscribe();
        }
        const hydrate = Builder.isBrowser && this.component && this.component.hydrate;
        const key = Builder.isEditing || !this.reloadOnRoute ? model : `${model}:${this.url}`;
        const subscription = (this.contentSubscription = this.builder
            .queueGetContent(model, {
            initialContent,
            key,
            ...options,
            prerender: true,
            static: !hydrate,
        })
            .subscribe((result) => {
            let match = result[0];
            // Cancel handling request if new one created or they have been canceled, to avoid race conditions
            // if multiple routes or other events happen
            if (this.contentSubscription !== subscription) {
                if (!receivedFirstResponse) {
                }
                return;
            }
            if (match && match.id === this.lastContentId) {
                return;
            }
            this.lastContentId = match && match.id;
            if (this.transferState && !Builder.isBrowser) {
                this.transferState.set(this.stateKeyString, result);
            }
            // tslint:disable-next-line:no-non-null-assertion
            const viewRef = this._viewRef;
            if (viewRef.destroyed) {
                this.subscriptions.unsubscribe();
                if (this.contentSubscription) {
                    this.contentSubscription.unsubscribe();
                }
                return;
            }
            const rootNode = Builder.isBrowser && viewRef.rootNodes[0];
            if (Builder.isBrowser) {
                if (rootNode) {
                    if (rootNode && rootNode.classList.contains('builder-editor-injected')) {
                        viewRef.detach();
                        return;
                    }
                }
            }
            // FIXME: nasty hack to detect secondary updates vs original. Build proper support into JS SDK
            // if (this._context.loading || result.length > viewRef.context.results.length) {
            this._context.loading = false;
            const search = this.builder.getLocation().search || '';
            // TODO: how handle singleton vs multiple
            if (!match && search.includes('builder.preview=' + this._context.model)) {
                match = {
                    id: 'preview',
                    name: 'Preview',
                    data: {},
                };
            }
            if (this.component) {
                this.component.contentLoad.next(match);
            }
            else {
                console.warn('No component!');
            }
            if (match) {
                const rootNode = this._viewRef.rootNodes[0];
                this.matchId = match.id;
                this.renderer.setAttribute(rootNode, 'builder-content-entry-id', match.id);
                this.match = match;
                viewRef.context.$implicit = match.data;
                viewRef.context.meta = match.meta;
                // viewRef.context.results = result.map(item => ({ ...item.data, $id: item.id }));
                if (!hydrate && this.builder.autoTrack) {
                    this.builder.trackImpression(match.id, match.variationId, undefined, {
                        content: match,
                    });
                }
            }
            if (!viewRef.destroyed) {
                viewRef.detectChanges();
                if (this.builderComponentService.contentComponentInstance &&
                    this.builderComponentService.contentComponentInstance.prerender &&
                    Builder.isBrowser &&
                    Builder.isStatic) {
                    Builder.nextTick(() => {
                        if (this.builderComponentService.contentComponentInstance) {
                            this.builderComponentService.contentComponentInstance.findAndRunScripts();
                        }
                    });
                }
                // TODO: it's possible we don't want anything below to run if this has been destroyed
                if (match && match.data && match.data.animations && Builder.isBrowser && !hydrate) {
                    Builder.nextTick(() => {
                        Builder.animator.bindAnimations(match.data.animations);
                    });
                }
            }
            if (!receivedFirstResponse) {
                receivedFirstResponse = true;
            }
        }, (error) => {
            if (this.component) {
                this.component.contentError.next(error);
            }
            else {
                console.warn('No component!');
            }
            if (!receivedFirstResponse) {
                // TODO: how to zone error
                receivedFirstResponse = true;
            }
        }));
    }
    _updateView() {
        if (this._context.model) {
            this._viewContainer.clear();
            if (this._templateRef) {
                this._viewRef = this._viewContainer.createEmbeddedView(this._templateRef, this._context);
            }
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderContentDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.Renderer2 }, { token: i1.BuilderService }, { token: i2.BuilderComponentService }, { token: i0.TransferState, optional: true }, { token: i0.TemplateRef }, { token: i3.Router, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.6", type: BuilderContentDirective, selector: "[builderModel]", inputs: { reloadOnRoute: "reloadOnRoute", builderModel: "builderModel" }, providers: [BuilderContentService], ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[builderModel]',
                    providers: [BuilderContentService],
                }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: i1.BuilderService }, { type: i2.BuilderComponentService }, { type: i0.TransferState, decorators: [{
                    type: Optional
                }] }, { type: i0.TemplateRef }, { type: i3.Router, decorators: [{
                    type: Optional
                }] }], propDecorators: { reloadOnRoute: [{
                type: Input
            }], builderModel: [{
                type: Input
            }] } });
export class BuilderContentContext {
    $implicit;
    match;
    model;
    loading = true;
    results = [];
    meta;
}
//# sourceMappingURL=data:application/json;base64,