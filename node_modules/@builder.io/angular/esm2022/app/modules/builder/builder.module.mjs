import './polyfills/custom-elements-es5-adapter';
import { Builder } from '@builder.io/sdk';
import { NgModule, Inject, PLATFORM_ID } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { BuilderContentComponent } from './components/builder-content/builder-content.component';
import { BuilderContentDirective } from './directives/builder-content.directive';
import { BUILDER_API_KEY, BuilderService } from './services/builder.service';
import { BuilderContentService } from './services/builder-content.service';
import { BuilderBlocksComponent } from './components/builder-blocks/builder-blocks.component';
import { BuilderBlocksOutletComponent } from './components/builder-blocks-outlet/builder-blocks-outlet.component';
import { BuilderComponentComponent } from './components/builder-component/builder-component.component';
import { BuilderComponentService } from './components/builder-component/builder-component.service';
import * as i0 from "@angular/core";
Builder.isStatic = true;
Builder.sdkInfo = {
    name: 'angular',
    version: '5.0.2',
};
if (typeof window !== 'undefined') {
    window.parent?.postMessage({
        type: 'builder.isAngularGen1Sdk',
        data: {
            // @ts-ignore
            version: '5.0.2',
        },
    }, '*');
}
const directives = [BuilderContentDirective];
const components = [
    BuilderContentComponent,
    BuilderBlocksComponent,
    BuilderComponentComponent,
    BuilderBlocksOutletComponent,
];
export class BuilderModule {
    platformId;
    constructor(injector, platformId) {
        this.platformId = platformId;
        if (isPlatformBrowser(platformId)) {
            // This cannot use a normal import, via https://github.com/angular/angular/issues/24551
            // Cannot use require, so use import. This otherwise breaks at runtime
            import('@angular/elements').then(({ createCustomElement }) => {
                for (const component of Builder.components) {
                    if (component.class &&
                        component.type === 'angular' &&
                        component.tag &&
                        typeof customElements.get(component.tag) === 'undefined') {
                        try {
                            const Element = createCustomElement(component.class, { injector });
                            // Register the custom element with the browser.
                            customElements.define(component.tag, Element);
                        }
                        catch (err) {
                            console.warn('Could not make angular element:', component.class);
                        }
                    }
                }
            });
        }
    }
    static forRoot(apiKey) {
        return {
            ngModule: BuilderModule,
            providers: [
                {
                    provide: BUILDER_API_KEY,
                    useValue: apiKey,
                },
            ],
        };
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderModule, deps: [{ token: i0.Injector }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "18.0.6", ngImport: i0, type: BuilderModule, declarations: [BuilderContentComponent,
            BuilderBlocksComponent,
            BuilderComponentComponent,
            BuilderBlocksOutletComponent, BuilderContentDirective], imports: [CommonModule], exports: [BuilderContentComponent,
            BuilderBlocksComponent,
            BuilderComponentComponent,
            BuilderBlocksOutletComponent, BuilderContentDirective] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderModule, providers: [BuilderService, BuilderContentService, BuilderComponentService], imports: [CommonModule] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [BuilderService, BuilderContentService, BuilderComponentService],
                    declarations: [components, directives],
                    exports: [components, directives],
                }]
        }], ctorParameters: () => [{ type: i0.Injector }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL21vZHVsZXMvYnVpbGRlci9idWlsZGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLHlDQUF5QyxDQUFDO0FBQ2pELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxQyxPQUFPLEVBQUUsUUFBUSxFQUFpQyxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUNqRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBRWxILE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDOztBQUVuRyxPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztBQUN4QixPQUFPLENBQUMsT0FBTyxHQUFHO0lBQ2hCLElBQUksRUFBRSxTQUFTO0lBQ2YsT0FBTyxFQUFFLDRCQUE0QjtDQUN0QyxDQUFDO0FBR0YsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxNQUFNLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FDeEI7UUFDRSxJQUFJLEVBQUUsMEJBQTBCO1FBQ2hDLElBQUksRUFBRTtZQUNKLGFBQWE7WUFDYixPQUFPLEVBQUUsNEJBQTRCO1NBQ3RDO0tBQ0YsRUFDRCxHQUFHLENBQ0osQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLFVBQVUsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFN0MsTUFBTSxVQUFVLEdBQUc7SUFDakIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0Qix5QkFBeUI7SUFDekIsNEJBQTRCO0NBQzdCLENBQUM7QUFRRixNQUFNLE9BQU8sYUFBYTtJQUNxQztJQUE3RCxZQUFZLFFBQWtCLEVBQStCLFVBQWtCO1FBQWxCLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDN0UsSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDO1lBQ2xDLHVGQUF1RjtZQUN2RixzRUFBc0U7WUFDdEUsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxtQkFBbUIsRUFBRSxFQUFFLEVBQUU7Z0JBQzNELEtBQUssTUFBTSxTQUFTLElBQUksT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDO29CQUMzQyxJQUNFLFNBQVMsQ0FBQyxLQUFLO3dCQUNmLFNBQVMsQ0FBQyxJQUFJLEtBQUssU0FBUzt3QkFDNUIsU0FBUyxDQUFDLEdBQUc7d0JBQ2IsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxXQUFXLEVBQ3hELENBQUM7d0JBQ0QsSUFBSSxDQUFDOzRCQUNILE1BQU0sT0FBTyxHQUFHLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDOzRCQUNuRSxnREFBZ0Q7NEJBQ2hELGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQzt3QkFDaEQsQ0FBQzt3QkFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDOzRCQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNuRSxDQUFDO29CQUNILENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWU7UUFDbkMsT0FBTztZQUNMLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsUUFBUSxFQUFFLE1BQU07aUJBQ2pCO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQzt1R0FwQ1UsYUFBYSwwQ0FDZ0IsV0FBVzt3R0FEeEMsYUFBYSxpQkFaeEIsdUJBQXVCO1lBQ3ZCLHNCQUFzQjtZQUN0Qix5QkFBeUI7WUFDekIsNEJBQTRCLEVBTlYsdUJBQXVCLGFBVS9CLFlBQVksYUFQdEIsdUJBQXVCO1lBQ3ZCLHNCQUFzQjtZQUN0Qix5QkFBeUI7WUFDekIsNEJBQTRCLEVBTlYsdUJBQXVCO3dHQWU5QixhQUFhLGFBSmIsQ0FBQyxjQUFjLEVBQUUscUJBQXFCLEVBQUUsdUJBQXVCLENBQUMsWUFEakUsWUFBWTs7MkZBS1gsYUFBYTtrQkFOekIsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLFNBQVMsRUFBRSxDQUFDLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSx1QkFBdUIsQ0FBQztvQkFDM0UsWUFBWSxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztvQkFDdEMsT0FBTyxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztpQkFDbEM7OzBCQUVrQyxNQUFNOzJCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vcG9seWZpbGxzL2N1c3RvbS1lbGVtZW50cy1lczUtYWRhcHRlcic7XG5pbXBvcnQgeyBCdWlsZGVyIH0gZnJvbSAnQGJ1aWxkZXIuaW8vc2RrJztcbmltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3RvciwgSW5qZWN0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBCdWlsZGVyQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9idWlsZGVyLWNvbnRlbnQvYnVpbGRlci1jb250ZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdWlsZGVyQ29udGVudERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9idWlsZGVyLWNvbnRlbnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJVSUxERVJfQVBJX0tFWSwgQnVpbGRlclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2J1aWxkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBCdWlsZGVyQ29udGVudFNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2J1aWxkZXItY29udGVudC5zZXJ2aWNlJztcbmltcG9ydCB7IEJ1aWxkZXJCbG9ja3NDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYnVpbGRlci1ibG9ja3MvYnVpbGRlci1ibG9ja3MuY29tcG9uZW50JztcbmltcG9ydCB7IEJ1aWxkZXJCbG9ja3NPdXRsZXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYnVpbGRlci1ibG9ja3Mtb3V0bGV0L2J1aWxkZXItYmxvY2tzLW91dGxldC5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBCdWlsZGVyQ29tcG9uZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2J1aWxkZXItY29tcG9uZW50L2J1aWxkZXItY29tcG9uZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdWlsZGVyQ29tcG9uZW50U2VydmljZSB9IGZyb20gJy4vY29tcG9uZW50cy9idWlsZGVyLWNvbXBvbmVudC9idWlsZGVyLWNvbXBvbmVudC5zZXJ2aWNlJztcblxuQnVpbGRlci5pc1N0YXRpYyA9IHRydWU7XG5CdWlsZGVyLnNka0luZm8gPSB7XG4gIG5hbWU6ICdhbmd1bGFyJyxcbiAgdmVyc2lvbjogJ1VOS05PV05fVkVSU0lPTl9UT19SRVBMQUNFJyxcbn07XG5cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHdpbmRvdy5wYXJlbnQ/LnBvc3RNZXNzYWdlKFxuICAgIHtcbiAgICAgIHR5cGU6ICdidWlsZGVyLmlzQW5ndWxhckdlbjFTZGsnLFxuICAgICAgZGF0YToge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHZlcnNpb246ICdVTktOT1dOX1ZFUlNJT05fVE9fUkVQTEFDRScsXG4gICAgICB9LFxuICAgIH0sXG4gICAgJyonXG4gICk7XG59XG5cblxuY29uc3QgZGlyZWN0aXZlcyA9IFtCdWlsZGVyQ29udGVudERpcmVjdGl2ZV07XG5cbmNvbnN0IGNvbXBvbmVudHMgPSBbXG4gIEJ1aWxkZXJDb250ZW50Q29tcG9uZW50LFxuICBCdWlsZGVyQmxvY2tzQ29tcG9uZW50LFxuICBCdWlsZGVyQ29tcG9uZW50Q29tcG9uZW50LFxuICBCdWlsZGVyQmxvY2tzT3V0bGV0Q29tcG9uZW50LFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIHByb3ZpZGVyczogW0J1aWxkZXJTZXJ2aWNlLCBCdWlsZGVyQ29udGVudFNlcnZpY2UsIEJ1aWxkZXJDb21wb25lbnRTZXJ2aWNlXSxcbiAgZGVjbGFyYXRpb25zOiBbY29tcG9uZW50cywgZGlyZWN0aXZlc10sXG4gIGV4cG9ydHM6IFtjb21wb25lbnRzLCBkaXJlY3RpdmVzXSxcbn0pXG5leHBvcnQgY2xhc3MgQnVpbGRlck1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3RvciwgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcpIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcbiAgICAgIC8vIFRoaXMgY2Fubm90IHVzZSBhIG5vcm1hbCBpbXBvcnQsIHZpYSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yNDU1MVxuICAgICAgLy8gQ2Fubm90IHVzZSByZXF1aXJlLCBzbyB1c2UgaW1wb3J0LiBUaGlzIG90aGVyd2lzZSBicmVha3MgYXQgcnVudGltZVxuICAgICAgaW1wb3J0KCdAYW5ndWxhci9lbGVtZW50cycpLnRoZW4oKHsgY3JlYXRlQ3VzdG9tRWxlbWVudCB9KSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIEJ1aWxkZXIuY29tcG9uZW50cykge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbXBvbmVudC5jbGFzcyAmJlxuICAgICAgICAgICAgY29tcG9uZW50LnR5cGUgPT09ICdhbmd1bGFyJyAmJlxuICAgICAgICAgICAgY29tcG9uZW50LnRhZyAmJlxuICAgICAgICAgICAgdHlwZW9mIGN1c3RvbUVsZW1lbnRzLmdldChjb21wb25lbnQudGFnKSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IEVsZW1lbnQgPSBjcmVhdGVDdXN0b21FbGVtZW50KGNvbXBvbmVudC5jbGFzcywgeyBpbmplY3RvciB9KTtcbiAgICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIGN1c3RvbSBlbGVtZW50IHdpdGggdGhlIGJyb3dzZXIuXG4gICAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShjb21wb25lbnQudGFnLCBFbGVtZW50KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvdWxkIG5vdCBtYWtlIGFuZ3VsYXIgZWxlbWVudDonLCBjb21wb25lbnQuY2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmb3JSb290KGFwaUtleT86IHN0cmluZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8QnVpbGRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQnVpbGRlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogQlVJTERFUl9BUElfS0VZLFxuICAgICAgICAgIHVzZVZhbHVlOiBhcGlLZXksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==