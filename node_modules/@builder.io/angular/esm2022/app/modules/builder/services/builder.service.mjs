import { Injectable, Inject, Optional } from '@angular/core';
import { RESPONSE, REQUEST } from '../../../../express.tokens';
import { Builder } from '@builder.io/sdk';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export const BUILDER_API_KEY = 'BUILDER_API_KEY'; // new InjectionToken<string>('BUILDER_API_KEY');
export const EXPRESS_REQUEST = 'EXPRESS_REQUEST'; // new InjectionToken<Request>('EXPRESS_REQUEST');
export const EXPRESS_RESPONSE = 'EXPRESS_RESPONSE'; // new InjectionToken<Response>('EXPRESS_RESPONSE');
export class BuilderService extends Builder {
    expressRequest;
    expressEngineRequest;
    expressResponse;
    expressEngineResponse;
    http;
    static componentInstances = {};
    autoTrack = !this.isDevelopment;
    // TODO: set this for QA
    get isDevelopment() {
        // Automatic determining of development environment
        return (Builder.isIframe ||
            (Builder.isBrowser && (location.hostname === 'localhost' || location.port !== '')));
    }
    constructor(apiKey, expressRequest, expressEngineRequest, expressResponse, expressEngineResponse, http) {
        super(apiKey, expressEngineRequest || expressRequest, expressEngineResponse || expressResponse);
        this.expressRequest = expressRequest;
        this.expressEngineRequest = expressEngineRequest;
        this.expressResponse = expressResponse;
        this.expressEngineResponse = expressEngineResponse;
        this.http = http;
        if (this.expressEngineRequest) {
            this.expressRequest = this.expressEngineRequest;
        }
        if (this.expressRequest) {
            this.request = this.expressRequest;
        }
        if (this.expressEngineResponse) {
            this.expressResponse = this.expressEngineResponse;
        }
        if (this.expressResponse) {
            this.response = this.expressResponse;
        }
        if (apiKey) {
            this.apiVersion = 'v3';
            this.init(apiKey);
        }
        if (!Builder.isBrowser && !this.request) {
            console.warn('No express request set! Builder cannot target appropriately without this, ' +
                'please contact support@builder.io to learn how to set this as required');
        }
    }
    // (override)
    requestUrl(url) {
        if (this.http) {
            return this.http.get(url).toPromise();
        }
        else {
            return super.requestUrl(url);
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderService, deps: [{ token: BUILDER_API_KEY, optional: true }, { token: EXPRESS_REQUEST, optional: true }, { token: REQUEST, optional: true }, { token: EXPRESS_RESPONSE, optional: true }, { token: RESPONSE, optional: true }, { token: i1.HttpClient, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderService });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: BuilderService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BUILDER_API_KEY]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [EXPRESS_REQUEST]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [REQUEST]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [EXPRESS_RESPONSE]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RESPONSE]
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9tb2R1bGVzL2J1aWxkZXIvc2VydmljZXMvYnVpbGRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBSzFDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLGlEQUFpRDtBQUNuRyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxrREFBa0Q7QUFDcEcsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxvREFBb0Q7QUFHeEcsTUFBTSxPQUFPLGNBQWUsU0FBUSxPQUFPO0lBb0IvQjtJQUdBO0lBR0E7SUFHQTtJQUNZO0lBN0J0QixNQUFNLENBQUMsa0JBQWtCLEdBQWlFLEVBQUUsQ0FBQztJQUU3RixTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBRWhDLHdCQUF3QjtJQUN4QixJQUFZLGFBQWE7UUFDdkIsbURBQW1EO1FBQ25ELE9BQU8sQ0FDTCxPQUFPLENBQUMsUUFBUTtZQUNoQixDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQ25GLENBQUM7SUFDSixDQUFDO0lBRUQsWUFHRSxNQUFjLEVBR04sY0FBdUIsRUFHdkIsb0JBQTZCLEVBRzdCLGVBQXlCLEVBR3pCLHFCQUErQixFQUNuQixJQUFnQjtRQUVwQyxLQUFLLENBQUMsTUFBTSxFQUFFLG9CQUFvQixJQUFJLGNBQWMsRUFBRSxxQkFBcUIsSUFBSSxlQUFlLENBQUMsQ0FBQztRQVp4RixtQkFBYyxHQUFkLGNBQWMsQ0FBUztRQUd2Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQVM7UUFHN0Isb0JBQWUsR0FBZixlQUFlLENBQVU7UUFHekIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFVO1FBQ25CLFNBQUksR0FBSixJQUFJLENBQVk7UUFJcEMsSUFBSSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUM5QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztRQUNsRCxDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQ3JDLENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDO1FBQ3BELENBQUM7UUFFRCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDdkMsQ0FBQztRQUVELElBQUksTUFBTSxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BCLENBQUM7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN4QyxPQUFPLENBQUMsSUFBSSxDQUNWLDRFQUE0RTtnQkFDMUUsd0VBQXdFLENBQzNFLENBQUM7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUVELGFBQWE7SUFDYixVQUFVLENBQUMsR0FBVztRQUNwQixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDeEMsQ0FBQzthQUFNLENBQUM7WUFDTixPQUFPLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUM7dUdBdEVVLGNBQWMsa0JBZ0JmLGVBQWUsNkJBR2YsZUFBZSw2QkFHZixPQUFPLDZCQUdQLGdCQUFnQiw2QkFHaEIsUUFBUTsyR0E1QlAsY0FBYzs7MkZBQWQsY0FBYztrQkFEMUIsVUFBVTs7MEJBZ0JOLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsZUFBZTs7MEJBRXRCLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsZUFBZTs7MEJBRXRCLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsT0FBTzs7MEJBRWQsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUV2QixRQUFROzswQkFDUixNQUFNOzJCQUFDLFFBQVE7OzBCQUVmLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSRVNQT05TRSwgUkVRVUVTVCB9IGZyb20gJy4uLy4uLy4uLy4uL2V4cHJlc3MudG9rZW5zJztcbmltcG9ydCB7IEJ1aWxkZXIgfSBmcm9tICdAYnVpbGRlci5pby9zZGsnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBCdWlsZGVyQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvYnVpbGRlci1jb250ZW50L2J1aWxkZXItY29udGVudC5jb21wb25lbnQnO1xuXG5leHBvcnQgY29uc3QgQlVJTERFUl9BUElfS0VZID0gJ0JVSUxERVJfQVBJX0tFWSc7IC8vIG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdCVUlMREVSX0FQSV9LRVknKTtcbmV4cG9ydCBjb25zdCBFWFBSRVNTX1JFUVVFU1QgPSAnRVhQUkVTU19SRVFVRVNUJzsgLy8gbmV3IEluamVjdGlvblRva2VuPFJlcXVlc3Q+KCdFWFBSRVNTX1JFUVVFU1QnKTtcbmV4cG9ydCBjb25zdCBFWFBSRVNTX1JFU1BPTlNFID0gJ0VYUFJFU1NfUkVTUE9OU0UnOyAvLyBuZXcgSW5qZWN0aW9uVG9rZW48UmVzcG9uc2U+KCdFWFBSRVNTX1JFU1BPTlNFJyk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCdWlsZGVyU2VydmljZSBleHRlbmRzIEJ1aWxkZXIge1xuICBzdGF0aWMgY29tcG9uZW50SW5zdGFuY2VzOiB7IFttb2RlbE5hbWU6IHN0cmluZ106IEJ1aWxkZXJDb250ZW50Q29tcG9uZW50IHwgdW5kZWZpbmVkIH0gPSB7fTtcblxuICBhdXRvVHJhY2sgPSAhdGhpcy5pc0RldmVsb3BtZW50O1xuXG4gIC8vIFRPRE86IHNldCB0aGlzIGZvciBRQVxuICBwcml2YXRlIGdldCBpc0RldmVsb3BtZW50KCkge1xuICAgIC8vIEF1dG9tYXRpYyBkZXRlcm1pbmluZyBvZiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxuICAgIHJldHVybiAoXG4gICAgICBCdWlsZGVyLmlzSWZyYW1lIHx8XG4gICAgICAoQnVpbGRlci5pc0Jyb3dzZXIgJiYgKGxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fCBsb2NhdGlvbi5wb3J0ICE9PSAnJykpXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChCVUlMREVSX0FQSV9LRVkpXG4gICAgYXBpS2V5OiBzdHJpbmcsXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEVYUFJFU1NfUkVRVUVTVClcbiAgICBwcml2YXRlIGV4cHJlc3NSZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChSRVFVRVNUKVxuICAgIHByaXZhdGUgZXhwcmVzc0VuZ2luZVJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEVYUFJFU1NfUkVTUE9OU0UpXG4gICAgcHJpdmF0ZSBleHByZXNzUmVzcG9uc2U6IFJlc3BvbnNlLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChSRVNQT05TRSlcbiAgICBwcml2YXRlIGV4cHJlc3NFbmdpbmVSZXNwb25zZTogUmVzcG9uc2UsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50XG4gICkge1xuICAgIHN1cGVyKGFwaUtleSwgZXhwcmVzc0VuZ2luZVJlcXVlc3QgfHwgZXhwcmVzc1JlcXVlc3QsIGV4cHJlc3NFbmdpbmVSZXNwb25zZSB8fCBleHByZXNzUmVzcG9uc2UpO1xuXG4gICAgaWYgKHRoaXMuZXhwcmVzc0VuZ2luZVJlcXVlc3QpIHtcbiAgICAgIHRoaXMuZXhwcmVzc1JlcXVlc3QgPSB0aGlzLmV4cHJlc3NFbmdpbmVSZXF1ZXN0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmV4cHJlc3NSZXF1ZXN0KSB7XG4gICAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLmV4cHJlc3NSZXF1ZXN0O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmV4cHJlc3NFbmdpbmVSZXNwb25zZSkge1xuICAgICAgdGhpcy5leHByZXNzUmVzcG9uc2UgPSB0aGlzLmV4cHJlc3NFbmdpbmVSZXNwb25zZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5leHByZXNzUmVzcG9uc2UpIHtcbiAgICAgIHRoaXMucmVzcG9uc2UgPSB0aGlzLmV4cHJlc3NSZXNwb25zZTtcbiAgICB9XG5cbiAgICBpZiAoYXBpS2V5KSB7XG4gICAgICB0aGlzLmFwaVZlcnNpb24gPSAndjMnO1xuICAgICAgdGhpcy5pbml0KGFwaUtleSk7XG4gICAgfVxuXG4gICAgaWYgKCFCdWlsZGVyLmlzQnJvd3NlciAmJiAhdGhpcy5yZXF1ZXN0KSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdObyBleHByZXNzIHJlcXVlc3Qgc2V0ISBCdWlsZGVyIGNhbm5vdCB0YXJnZXQgYXBwcm9wcmlhdGVseSB3aXRob3V0IHRoaXMsICcgK1xuICAgICAgICAgICdwbGVhc2UgY29udGFjdCBzdXBwb3J0QGJ1aWxkZXIuaW8gdG8gbGVhcm4gaG93IHRvIHNldCB0aGlzIGFzIHJlcXVpcmVkJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyAob3ZlcnJpZGUpXG4gIHJlcXVlc3RVcmwodXJsOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5odHRwKSB7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnRvUHJvbWlzZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3VwZXIucmVxdWVzdFVybCh1cmwpO1xuICAgIH1cbiAgfVxufVxuIl19